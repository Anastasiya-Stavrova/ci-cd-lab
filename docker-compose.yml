services:
  mongodb:
    image: mongo:latest
    container_name: movies-app-mongodb
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    ports:
      - ${MONGODB_LOCAL_PORT}:${MONGODB_DOCKER_PORT}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - web_network

  nginx:
    image: ${CI_REGISTRY_IMAGE}/nginx:${APP_VERSION}
    container_name: movies-app-nginx
    depends_on:
      - server
      - client
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "127.0.0.1:3050:80"
    networks:
      - web_network

  server:
    image: ${CI_REGISTRY_IMAGE}/server:${APP_VERSION}
    container_name: movies-app-server
    depends_on:
      mongodb:
        condition: service_healthy
    restart: on-failure
    build:
      dockerfile: Dockerfile
      context: "./server"
    environment:
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_LOCAL_PORT=${MONGODB_DOCKER_PORT}
      - MONGODB_LOCAL_HOST=${MONGODB_DOCKER_HOST}
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - /app/node_modules
      - ./server:/app
    networks:
      - web_network

  client:
    image: ${CI_REGISTRY_IMAGE}/client:${APP_VERSION}
    container_name: movies-app-client
    depends_on:
      - server
    restart: on-failure
    build:
      dockerfile: Dockerfile
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
    networks:
      - web_network

volumes:
  mongodb_data_container:

networks:
  web_network:
    driver: bridge
